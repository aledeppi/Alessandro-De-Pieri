
// Es 1:
// unione
// unione [1;2;3] [2;3;4] -> [1;2;3;4]

let rec ugual (n:'a) (l1:'a list) = match l1 with         // se un elemento è non presente in una lista da true, se è presente false
                                      |[] -> true
                                      |x::xs -> if n=x then false    
                                                else ugual n xs
               
let rec unione (l1:'a list) (l2: 'a list) = match (l1, l2) with 
                                             |([], []) -> []
                                             |(x::xs, []) -> l1
                                             |([], y::ys) -> l2
                                             |(x::xs, y::ys) when ((ugual y l1)=true) -> y:: (unione l1 ys)
                                             |(x::xs, y::ys) when ((ugual y l1)=false) -> (unione l1 ys)


// intersezione
// inters [1;2;3;4] [2;3;4;5] -> [2;3;4]

let rec same (n:'a) (l1:'a list) = match l1 with          // se un elemento è presente in una lista da true, se è presente false
                                     |[] -> false
                                     |x::xs -> if n=x then true
                                               else same n xs

let rec inters l1 l2 = match (l1, l2) with
                         |([], []) -> []
                         |(l1, []) -> l1
                         |([], l2) -> []
                         |(x::xs, y::ys) -> if ((same x l2)= true) then x::(inters xs l2)
                                            else (inters xs l2)


// differenza: sottrae agli elementi del primo insieme gli elementi del secondo insieme
// diffe [1;3;5;7] [1;3;8;2] -> [5;7]

let rec same (n:'a) (l:'a list) = match l with            // se un elemento è presente in una lista da true, se è presente false
                                    |[] -> false
                                    |x::xs -> if n=x then true
                                              else same n xs

let rec diffe l1 l2 = match (l1, l2) with
                        |([], []) -> []
                        |(l1, []) -> l1
                        |([], l2) -> []
                        |(x::xs, y::ys) -> if (same x l2) then (diffe xs l2)
                                           else x::(diffe xs l2)


// Es 3: intpairs applicata a un intero positivo n, restituisca una lista di tutte le coppie di interi non negativi (x,y) con x+y=n.
// intpairs 3 -> [(0, 3); (1, 2); (2, 1); (3,0)]

let intpairs x = 
    let rec aux n x = if x<0 then []
                      else (n, x) :: aux (n+1) (x-1)
    in aux 0 x


// Es 4: trips: ’a list -> (’a * ’a * ’a) list  applicata a una lista lst, riporti la lista di tutte le triple adiacenti di elementi di lst 
// (la lista vuota se lst ha meno di 3 elementi).
// trips [1;2;3;4;5] -> [(1, 2, 3); (2, 3, 4); (3, 4, 5)]

let rec long (l:'a list) = match l with                         
                             |[] -> 0
                             |x::xs -> 1+ long xs

let rec trips (l:'a list) = match l with
                              |l when (long l)<3 -> []
                              |x::y::z::xs when (long l)>2 -> (x, y, z) :: trips (y::z::xs)


// Es 5: choose: int -> ’a list -> ’a list list che, applicata a un intero positivo k e una lista l, riporti una lista contenente tutte le sottoliste 
// di l di lunghezza k.
// choose 3 [1;2;3;4;5] -> [[1; 2; 3]; [2; 3; 4]; [3; 4; 5]]

let rec sottolista (k:int) (l:'a list) = match (k, l) with  //crea una sottolista partendo dal primo elem di l di lunghezza k
                                           |(0, x::xs) -> []
                                           |(k, []) -> []
                                           |(k, x::xs) -> x::(sottolista (k-1) xs)

let rec long (l:'a list) = match l with                         
                             |[] -> 0
                             |x::xs -> 1+ long xs

let rec choose (k:int) (l:'a list) = match (k, l) with
                                       |(k, x::xs) -> if (long l)>=k then sottolista k (x::xs) :: choose k (xs)
                                                      else []


// Es 6: strike_ball: ’a list -> ’a list -> (int * int) applicata a due liste, test e guess, che si assumono della stessa lunghezza, riporti una 
// coppia (strike,ball) dove strike è il numero di elementi di test che occorrono anche in guess, ma in diversa posizione, e ball è il numero di 
// elementi di test che occorrono in guess nella stessa posizione in cui sono in test.
// strike_ball [1;2;3;4;5;6] [5;6;3;4;2;10] -> (3, 2): infatti ci sono 3 elementi “fuori posto” (2,5,6) e 2 nella stessa posizione (3,4).

let rec presente (e:'a) (l:'a list) = match l with         //funzione che dice se x è presente in l
                                         |[] -> false
                                         |x::xs -> if x=e then true
                                                   else presente e xs

let strike (l1:'a list) (l2:'a list) = 
    let rec aux_s (l1:'a list) (l2:'a list) (l2x:'a list) =
        match (l1, l2) with
          |([], []) -> 0
          |(_, []) | ([], _) -> failwith "lenght list unsame"
          |x::xs, y::ys -> if x<>y && (presente x l2x) then 1+ (aux_s xs ys l2x)
                           else (aux_s xs ys l2x)
    in aux_s l1 l2 l2

let rec ball (l1:'a list) (l2:'a list) =
    match (l1, l2) with
      |([], []) -> 0
      |(_, []) | ([], _) -> failwith "lenght list unsame"
      |x::xs, y::ys -> if x=y then 1+ (ball xs ys)
                       else (ball xs ys)

let strike_ball (test:'a list) (guest:'a list) = (strike test guest), (ball test guest)


// Es 7: Definire una funzione ricorsiva che calcoli il massimo comun divisore (gcd) di due interi non negativi n e m (e non entrambi nulli),
// utilizzando l’algoritmo di Euclide basato sulla seguente proprietà: gcd(n, m) = n (se m = 0); gcd(n, m) = gcd(m;n%m) (se m <> 0)
                                                    
let rec gcd (n, m) = match (n, m) with
                       |(n, 0) -> n
                       |(n, m) -> gcd (m, n%m)


// Es 8: Scrivere una funzione ricorsiva in coda che calcola il prodotto di due numeri n e m.

let prod_ric (x:int) (y:int) = 
    let rec aux (x:int) (y:int) (a:int) = if y=0 then a
                                          else aux (x) (y-1) (a)
    in aux x y x


// Es 9: flatten: ’a list list -> ’a list data una lista di liste l restituisce la lista ottenuta dalla concatenazione degli elementi di l
// flatten [[1;2];[];[4;5;6]] -> [1; 2; 4; 5; 6]

let rec flatten (l:'a list list) = match l with
                                     |[] -> []
                                     |x::xs -> x @ flatten xs


// Es 10: Scrivere una funzione ricorsiva permut: ’a list -> a’ list -> bool , assumendo che lista1 e lista2 siano liste senza ripetizioni 
// di elementi e con la stessa lunghezza, permut lista1 lista2 riporti true se lista1 è una permutazione di lista2, false altrimenti 
// (la funzione non deve mai sollevare eccezioni).
// permut [6;4;9;7] [9;7;4;6] -> true       ;       permut [6;9;2] [9;6;1] -> false

let rec presente (e:'a) (l:'a list) = match l with         //funzione che dice se x è presente in l
                                         |[] -> false
                                         |x::xs -> if x=e then true
                                                   else presente e xs
let permut (lista1:'a list) (lista2:'a list) =
    let rec aux_p (lista1:'a list) (lista2:'a list) (lst2:'a list) =
      match (lista1, lista2) with
        |([], []) -> true
        |(_, []) | ([], _) -> failwith "lenght list unsame"
        |(x::xs, y::ys) -> if (presente x lst2) then aux_p xs ys lst2
                           else false
    in aux_p lista1 lista2 lista2


// Es 11: issorted: ’a list -> bool che determini se una lista è ordinata in senso non decrescente, cioè in cui ogni elemento 
// è minore o uguale al successivo.

let rec issorted (l:int list) =
    match l with
      |[] -> failwith "lista vuota"
      |[x] -> true
      |x::y::xs -> if (x<=y) then issorted (y::xs)
                   else false


// Es 12: complemento: ’a list -> ’a list -> ’a list che, date due  liste superset e set rappresentanti insiemi (quindi senza ripetizioni), restituisca
// il complemento di set rispetto a superset. La funzione solleverà un’eccezione se qualche elemento di set non appartiene a superset.
// Ad esempio, il valore di complemento [1;2;3;4;5;6] [2;4;6] sarà la lista [1;3;5] (o una sua permutazione). 
// Il calcolo del valore di complemento [1;2;3;4;5;6] [2;7;6] solleverà invece un’eccezione.

let rec presente (e:'a) (l:'a list) = 
    match l with                                           //funzione che dice se e è presente in l
      |[] -> false
      |x::xs -> if x=e then true
                else presente e xs

let rec pres_list (l1:'a list) (l2:'a list) =              //dice se l1 è presente in l2
    match l1 with
      |[] -> true
      |x::xs -> if (presente x l2) then (pres_list xs l2)
                else false

let rec delate (u:'a) (lst:'a list) =                       //elimina un elemento u da lst
    match lst with
      |[] -> []
      |x::xs -> if x=u then (delate u xs)
                else x:: (delate u xs)

let rec complemento (superset:'a list) (set:'a list) =
    if (pres_list set superset) then match set with
                                       |[] -> superset
                                       |y::ys -> complemento (delate y superset) ys 
    else failwith "eccezione"


// Es 13: Scrivere una funzione ricorsiva gaps che, data una lista l, restituisca una lista di liste contenente tutte le sottoliste di l 
// che si possono ottenere togliendo un elemento da l. 
// Per esempio: gaps [] restituirà [], mentre gaps [6; 4; 3] restituirà [[4; 3]; [6; 3]; [6; 4]].
// Attenzione che gaps [6; 4; 3; 3] restituirà [[4; 3; 3]; [6; 3; 3]; [6; 4; 3]; [6; 4; 3]]

let rec delete (k:int) (l:'a list) =                //elimina l'elemento di l in posiz k
    match l with
      |[] -> []
      |x::xs -> if k>0 then x::delete (k-1) xs
                else xs

let gaps (l:'a list)=                              
    let rec aux (l:'a list) (lk:'a list) (p:int) =
        match l with
          |[] -> []
          |x::xs -> (delete p lk) :: (aux xs lk (p+1))
    in aux l l 0
    
